diff --git a/node_modules/@miblanchard/react-native-slider/lib/index.js b/node_modules/@miblanchard/react-native-slider/lib/index.js
index 074bd84..130867d 100644
--- a/node_modules/@miblanchard/react-native-slider/lib/index.js
+++ b/node_modules/@miblanchard/react-native-slider/lib/index.js
@@ -98,6 +98,10 @@ export class Slider extends PureComponent {
                 width: 0,
                 height: 0,
             },
+            trackMarkSize: {
+                width: 0,
+                height: 0
+            },
             trackMarksValues: updateValues({
                 values: normalizeValue(this.props, this.props.trackMarks),
             }),
@@ -205,6 +209,9 @@ export class Slider extends PureComponent {
     _measureThumb = (e) => {
         this._handleMeasure('_thumbSize', e);
     };
+    _measureTrackMarkSize = (e) => {
+        this._handleMeasure('_trackMarkSize', e);
+    }
     _handleMeasure = (name, e) => {
         const { width, height } = e.nativeEvent.layout;
         const size = {
@@ -218,11 +225,12 @@ export class Slider extends PureComponent {
             return;
         }
         this[name] = size;
-        if (this._containerSize && this._thumbSize) {
+        if (this._containerSize && this._thumbSize && this._trackMarkSize) {
             this.setState({
                 containerSize: this._containerSize,
                 thumbSize: this._thumbSize,
                 allMeasured: true,
+                trackMarkSize: this._trackMarkSize
             });
         }
     };
@@ -376,6 +384,7 @@ export class Slider extends PureComponent {
     _previousLeft = 0;
     _thumbSize;
     _trackSize;
+    _trackMarkSize;
     _renderDebugThumbTouchRect = (thumbLeft, index) => {
         const { height, y, width } = this._getThumbTouchRect() || {};
         const positionStyle = {
@@ -396,8 +405,8 @@ export class Slider extends PureComponent {
                 : thumbImage) }));
     };
     render() {
-        const { containerStyle, debugTouchArea, maximumTrackTintColor, maximumValue, minimumTrackTintColor, minimumValue, renderAboveThumbComponent, renderTrackMarkComponent, renderThumbComponent, thumbStyle, thumbTintColor, trackStyle, vertical, ...other } = this.props;
-        const { allMeasured, containerSize, thumbSize, trackMarksValues, values, } = this.state;
+        const { containerStyle, debugTouchArea, maximumTrackTintColor, maximumValue, minimumTrackTintColor, minimumValue, renderAboveThumbComponent, renderTrackMarkComponent, renderTrackMarkComponentActive, renderThumbComponent, thumbStyle, thumbTintColor, trackStyle, vertical, ...other } = this.props;
+        const { allMeasured, containerSize, thumbSize, trackMarksValues, values, trackMarkSize } = this.state;
         const interpolatedThumbValues = values.map((value) => value.interpolate({
             inputRange: [minimumValue, maximumValue],
             outputRange: I18nManager.isRTL
@@ -412,8 +421,8 @@ export class Slider extends PureComponent {
             trackMarksValues.map((v) => v.interpolate({
                 inputRange: [minimumValue, maximumValue],
                 outputRange: I18nManager.isRTL
-                    ? [0, -(containerSize.width - thumbSize.width)]
-                    : [0, containerSize.width - thumbSize.width],
+                    ? [0, -(containerSize.width - trackMarkSize.width)]
+                    : [0, containerSize.width - trackMarkSize.width],
             }));
         const valueVisibleStyle = {};
         if (!allMeasured) {
@@ -474,7 +483,27 @@ export class Slider extends PureComponent {
                                 ],
                                 ...valueVisibleStyle,
                             },
-                        ] }, renderTrackMarkComponent(i)))),
+                        ], onLayout: this._measureTrackMarkSize }, renderTrackMarkComponent(i)))),
+                renderTrackMarkComponentActive &&
+                    interpolatedTrackMarksValues &&
+                    interpolatedTrackMarksValues.map((value, i) => (React.createElement(Animated.View, { key: `track-mark-${i}`, style: [
+                            styles.renderThumbComponent,
+                            {
+                                transform: [
+                                    {
+                                        translateX: value,
+                                    },
+                                    {
+                                        translateY: 0,
+                                    },
+                                ],
+                                opacity: this.state.values[0].interpolate({
+                                    inputRange: [i -1, i],
+                                    outputRange: [0, 1]
+                                }),
+                                ...valueVisibleStyle,
+                            },
+                        ], onLayout: this._measureTrackMarkSize }, renderTrackMarkComponentActive(i)))),
                 interpolatedThumbValues.map((value, i) => (React.createElement(Animated.View, { key: `slider-thumb-${i}`, style: [
                         renderThumbComponent
                             ? styles.renderThumbComponent
